version: '3'

services:
  traefik:
    image: traefik:v2.10
    networks:
      - app_net
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/traefik.toml:/etc/traefik/traefik.toml
    restart: always
    depends_on:
      - home
      - prometheus
      - grafana
      - mongo
      - deck
      - repository
      - client

  home:
    build: 
      context: jiechen.dev
    networks:
      - app_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.home.rule=Host(`jiechen.dev`)
      - traefik.docker.network=chendev_default
      - traefik.http.routers.home.entrypoints=web
    restart: always

  prometheus:
    image: prom/prometheus
    networks:
      - app_net
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/:/etc/prometheus/
      - PROMETHEUS:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana-enterprise
    networks:
      - app_net
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - GRAFANA:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: "true"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"
        
  uptime:
    image: louislam/uptime-kuma
    networks:
      - app_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime.rule=Host(`status.jiechen.dev`)
      - traefik.docker.network=chendev_default
      - traefik.http.routers.uptime.entrypoints=web
    restart: always
    volumes:
      - UPTIME:/app/data

  mongo:
    image: mongo
    networks:
      - app_net
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  repository:
    build:
      context: ./loqi/repository/
      dockerfile: Dockerfile
    networks:
        - app_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.repository.rule=Host(`loqi.jiechen.dev`) && PathPrefix(`/api/repository`)
      - traefik.http.routers.repository.entrypoints=web
    restart: always
    depends_on:
      - mongo

  deck:
    build:
      context: ./loqi/deck/
      dockerfile: Dockerfile
    networks:
        - app_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.deck.rule=Host(`loqi.jiechen.dev`) && PathPrefix(`/api/deck`)
      - traefik.http.routers.deck.entrypoints=web
    restart: always
    depends_on:
      - mongo

  client:
    build:
      context: ./loqi/neo_client/
      dockerfile: Dockerfile
    networks:
        - app_net
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`loqi.jiechen.dev`)
      - traefik.http.routers.client.entrypoints=web
    restart: always
    depends_on:
      - repository
      - deck

volumes:
    PROMETHEUS:
    GRAFANA:
    UPTIME:

networks:
  app_net:
      name: chendev_default
      external: true
